name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: 'ZPL2PDF'

jobs:
  # Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        include:
          - os: windows-latest
            runtime: win-x64
          - os: ubuntu-latest
            runtime: linux-x64
          - os: macos-latest
            runtime: osx-x64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore

    - name: Run unit tests
      run: dotnet test tests/ZPL2PDF.Unit/ --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage"

    - name: Run integration tests
      run: dotnet test tests/ZPL2PDF.Integration/ --configuration Release --no-build --verbosity normal

    - name: Publish application
      run: dotnet publish ${{ env.PROJECT_NAME }}.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.runtime }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: zpl2pdf-${{ matrix.runtime }}
        path: ./publish/${{ matrix.runtime }}/

  # Cross-platform builds
  cross-platform-builds:
    name: Cross-Platform Builds
    runs-on: ubuntu-latest
    needs: build-and-test
    strategy:
      matrix:
        include:
          - runtime: win-x64
            os: Windows
          - runtime: win-x86
            os: Windows
          - runtime: linux-x64
            os: Linux
          - runtime: linux-arm64
            os: Linux
          - runtime: linux-arm
            os: Linux
          - runtime: osx-x64
            os: macOS
          - runtime: osx-arm64
            os: macOS

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build for ${{ matrix.os }} (${{ matrix.runtime }})
      run: dotnet publish ${{ env.PROJECT_NAME }}.csproj --configuration Release --runtime ${{ matrix.runtime }} --self-contained true --output ./publish/${{ matrix.runtime }}

    - name: Create archive
      shell: bash
      run: |
        cd ./publish/${{ matrix.runtime }}
        if [[ "${{ matrix.os }}" == "Windows" ]]; then
          zip -r ../ZPL2PDF-${{ matrix.runtime }}.zip .
        else
          tar -czf ../ZPL2PDF-${{ matrix.runtime }}.tar.gz .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ZPL2PDF-${{ matrix.runtime }}
        path: ./publish/ZPL2PDF-${{ matrix.runtime }}.*

  # Docker build and test
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: zpl2pdf:latest
        platforms: linux/amd64,linux/arm64

    - name: Test Docker image
      run: |
        docker run --rm zpl2pdf:latest --help

  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run code analysis
      run: dotnet build --configuration Release --verbosity normal

    - name: Check for TODO comments
      run: |
        if grep -r "TODO\|FIXME\|HACK" . --include="*.cs" --exclude-dir=bin --exclude-dir=obj; then
          echo "Found TODO/FIXME/HACK comments in source code"
          exit 1
        fi

  # Security scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, cross-platform-builds, docker-build, code-quality]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create release archive
      run: |
        mkdir -p ./release
        for dir in ./artifacts/*/; do
          runtime=$(basename "$dir")
          if [[ -d "$dir" ]]; then
            cp -r "$dir"/* ./release/
          fi
        done

    - name: Create checksums
      run: |
        cd ./release
        find . -type f -name "ZPL2PDF*" -exec sha256sum {} \; > checksums.txt

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./release/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain

  # Deploy to package managers
  deploy-packages:
    name: Deploy Packages
    runs-on: ubuntu-latest
    needs: [release]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Build for winget
      run: |
        dotnet publish ${{ env.PROJECT_NAME }}.csproj --configuration Release --runtime win-x64 --self-contained true --output ./winget-build

    - name: Create winget manifest
      run: |
        mkdir -p ./winget-manifest
        # Create winget manifest files here
        # This would be implemented based on winget requirements

    - name: Deploy to winget
      run: |
        # Deploy to winget repository
        # This would be implemented based on winget deployment process

    - name: Deploy to Linux packages
      run: |
        # Deploy .deb and .rpm packages
        # This would be implemented based on package repository requirements
